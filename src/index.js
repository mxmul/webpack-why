#!/usr/bin/env node
// @flow

const chalk = require('chalk');
const fs = require('fs');
const treeify = require('treeify');
const Yargs = require('yargs');

function getEntries(modules: Object[], chunks: Object[]): Set<string> {
    const chunkSet = new Set(chunks);
    return new Set(
        modules
            .filter(module => {
                const moduleChunks = new Set(module.chunks);
                const intersection = new Set(
                    [...moduleChunks].filter(x => chunkSet.has(x)),
                );
                return intersection.size > 0 && module.reasons.length === 0;
            })
            .map(module => module.name),
    );
}

function buildDependencyTree(
    allModules: Object[],
    entries: Set<string>,
    module: Object,
): Object {
    const tree = {
        [module.name]: {},
    };

    module.reasons.forEach(reason => {
        const subtree = buildDependencyTree(
            allModules,
            entries,
            allModules[reason.moduleId],
        );
        if (
            entries.has(reason.moduleName) ||
            Object.keys(subtree[reason.moduleName]).length
        ) {
            tree[module.name][reason.moduleName] = subtree[reason.moduleName];
        }
    });

    return tree;
}

function why(stats: Object, moduleName: string): void {
    if (stats.modules) {
        const module = stats.modules.find(m => m.name === moduleName);
        if (module) {
            stats.assets.forEach(asset => {
                const entries = getEntries(stats.modules, asset.chunks);
                const tree = buildDependencyTree(
                    stats.modules,
                    entries,
                    module,
                );

                if (Object.keys(tree[module.name]).length > 0) {
                    console.log(chalk.bold(`Hash: ${stats.hash}`));
                    console.log(chalk.bold.green(asset.name));
                    console.log(treeify.asTree(tree, true));
                }
            });
        }
    }

    if (stats.children) {
        stats.children.forEach(childStats => {
            why(childStats, moduleName);
        });
    }
}

function main(): void {
    const command = Yargs.command(
        '$0 <file> <module>',
        'Determine why a module is included in a Webpack bundle.',
        yargs => {
            yargs
                .positional('file', {
                    describe:
                        'path to a stats file generated by `webpack --json`',
                })
                .positional('module', {
                    describe: 'the name of the module',
                });
        },
    ).help();

    const { argv } = command;

    const stats = JSON.parse(fs.readFileSync(argv.file, 'utf8'));
    why(stats, argv.module);
}

main();
